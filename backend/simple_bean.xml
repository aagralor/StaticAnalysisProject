<ArrayList><item>&lt;h2>&lt;a name="WEAK_MESSAGE_DIGEST_MD5">MD2, MD4 and MD5 are weak hash functions&lt;/a>&lt;/h2>&lt;p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. &lt;b>PBKDF2&lt;/b> should be used to hash password for example.&lt;/p>&lt;blockquote>
  "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2
 &lt;sup>24.1&lt;/sup>).[1] Further, there is also a chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using off-the-shelf computing hardware (complexity 2
 &lt;sup>39&lt;/sup>).[2]"
 &lt;br> - 
 &lt;a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security&lt;/a>
&lt;/blockquote>&lt;blockquote>
  "
 &lt;b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256&lt;/b>:
 &lt;br> The use of these hash functions is acceptable for all hash function applications."
 &lt;br> - 
 &lt;a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15&lt;/a>
&lt;/blockquote>&lt;blockquote>
  "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try, it becomes harder to apply the dictionary or brute force attacks."
 &lt;br>- 
 &lt;a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation p.12&lt;/a>
&lt;/blockquote>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br> &lt;/p>&lt;pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");    md5Digest.update(password.getBytes());    byte[] hashValue = md5Digest.digest();&lt;/pre>&lt;br>&lt;pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution (Using bouncy castle):&lt;/b>&lt;br> &lt;/p>&lt;pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();}&lt;/pre>&lt;br>&lt;b>Solution (Java 8 and later):&lt;/b>&lt;br>&lt;pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");    return f.generateSecret(spec).getEncoded();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>[1] &lt;a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5&lt;/a>: Master Thesis by M.M.J. Stevens&lt;br>[2] &lt;a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications&lt;/a>: Paper written by Marc Stevens&lt;br>&lt;a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5&lt;/a>&lt;br>&lt;a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths&lt;/a>&lt;br>&lt;a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation&lt;/a>&lt;br>&lt;a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="COMMAND_INJECTION">Potential Command Injection&lt;/a>&lt;/h2>&lt;p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>import java.lang.Runtime;Runtime r = Runtime.getRuntime();r.exec("/bin/sh -c some_tool" + input);&lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="COMMAND_INJECTION">Potential Command Injection&lt;/a>&lt;/h2>&lt;p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>import java.lang.Runtime;Runtime r = Runtime.getRuntime();r.exec("/bin/sh -c some_tool" + input);&lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_LEAK">Unexpected property leak&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;}[...]@Controllerclass UserController {    @GetMapping("/user/{id}")    public UserEntity getUser(@PathVariable("id") String id) {        return userService.findById(id).get(); //Return the user entity with ALL fields.    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields. &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","firstname","lastname"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10-2017 A3: Sensitive Data Exposure&lt;/a>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/212.html">CWE-212: Improper Cross-boundary Removal of Sensitive Data&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/213.html">CWE-213: Intentional Information Exposure&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_LEAK">Unexpected property leak&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;}[...]@Controllerclass UserController {    @GetMapping("/user/{id}")    public UserEntity getUser(@PathVariable("id") String id) {        return userService.findById(id).get(); //Return the user entity with ALL fields.    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields. &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","firstname","lastname"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10-2017 A3: Sensitive Data Exposure&lt;/a>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/212.html">CWE-212: Improper Cross-boundary Removal of Sensitive Data&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/213.html">CWE-213: Intentional Information Exposure&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_LEAK">Unexpected property leak&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;}[...]@Controllerclass UserController {    @GetMapping("/user/{id}")    public UserEntity getUser(@PathVariable("id") String id) {        return userService.findById(id).get(); //Return the user entity with ALL fields.    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields. &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","firstname","lastname"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10-2017 A3: Sensitive Data Exposure&lt;/a>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/212.html">CWE-212: Improper Cross-boundary Removal of Sensitive Data&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/213.html">CWE-213: Intentional Information Exposure&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_LEAK">Unexpected property leak&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;}[...]@Controllerclass UserController {    @GetMapping("/user/{id}")    public UserEntity getUser(@PathVariable("id") String id) {        return userService.findById(id).get(); //Return the user entity with ALL fields.    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields. &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","firstname","lastname"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10-2017 A3: Sensitive Data Exposure&lt;/a>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/212.html">CWE-212: Improper Cross-boundary Removal of Sensitive Data&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/213.html">CWE-213: Intentional Information Exposure&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_MASS_ASSIGNMENT">Mass assignment&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;    private Long role;}[...]@Controllerclass UserController {    @PutMapping("/user/")    @ResponseStatus(value = HttpStatus.OK)    public void update(UserEntity user) {        userService.save(user); //ALL fields from the user can be altered    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>General Guidelines:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields.&lt;br>&lt;br>With whitelist:&lt;br> &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","password"]);   }}    &lt;/pre>&lt;br>&lt;br>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setDisallowedFields(["role"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/915.html">CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="ENTITY_MASS_ASSIGNMENT">Mass assignment&lt;/a>&lt;/h2>&lt;p> Persistent objects should never be returned by APIs. They might lead to leaking business logic over the UI, unauthorized tampering of persistent objects in database.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@javax.persistence.Entityclass UserEntity {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;    private Long role;}[...]@Controllerclass UserController {    @PutMapping("/user/")    @ResponseStatus(value = HttpStatus.OK)    public void update(UserEntity user) {        userService.save(user); //ALL fields from the user can be altered    }}&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>General Guidelines:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Data transfer objects should be used instead including only the parameters needed as input/response to/from the API.&lt;/li> 
 &lt;li>Sensitive parameters should be removed properly before transferring to UI.&lt;/li> 
 &lt;li>Data should be persisted in database only after proper sanitisation checks.&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;p> &lt;b>Spring MVC Solution:&lt;/b>&lt;br> In Spring specifically, you can apply the following solution to allow or disallow specific fields.&lt;br>&lt;br>With whitelist:&lt;br> &lt;/p>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setAllowedFields(["username","password"]);   }}    &lt;/pre>&lt;br>&lt;br>&lt;pre>@Controllerclass UserController {   @InitBinder   public void initBinder(WebDataBinder binder, WebRequest request)   {      binder.setDisallowedFields(["role"]);   }}    &lt;/pre>&lt;p>&lt;/p>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html#spring-mvc">OWASP Cheat Sheet: Mass Assignment&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/915.html">CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_IN">Potential Path Traversal (file read)&lt;/a>&lt;/h2>&lt;p>A file is opened to read its content. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;br>&lt;/p>&lt;pre>@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", image); //Weak point    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p> &lt;b>Solution:&lt;/b>&lt;br>&lt;/p>&lt;pre>import org.apache.commons.io.FilenameUtils;@GET@Path("/images/{image}")@Produces("images/*")public Response getImage(@javax.ws.rs.PathParam("image") String image) {    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix    if (!file.exists()) {        return Response.status(Status.NOT_FOUND).build();    }    return Response.ok().entity(new FileInputStream(file)).build();}&lt;/pre>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_OUT">Potential Path Traversal (file write)&lt;/a>&lt;/h2>&lt;p>A file is opened to write to its contents. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="PATH_TRAVERSAL_OUT">Potential Path Traversal (file write)&lt;/a>&lt;/h2>&lt;p>A file is opened to write to its contents. The filename comes from an &lt;b>input&lt;/b> parameter.If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.&lt;/p>&lt;p>This rule identifies &lt;b>potential&lt;/b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlledby the user. If that is the case, the reported instance is a false positive.&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal&lt;/a>&lt;br>&lt;a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal&lt;/a>&lt;br>&lt;a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a>&lt;/p>&lt;p>&lt;br>&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="URLCONNECTION_SSRF_FD">URLConnection Server-Side Request Forgery (SSRF) and File Disclosure&lt;/a>&lt;/h2>&lt;p> Server-Side Request Forgery occur when a web server executes a request to a user supplied destination parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services or to launch attacks from your web server.&lt;/p>&lt;p> URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;/p>&lt;pre>new URL(String url).openConnection()&lt;/pre>&lt;pre>new URL(String url).openStream()&lt;/pre>&lt;pre>new URL(String url).getContent()&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Don't accept URL destinations from users&lt;/li> 
 &lt;li>Accept a destination key, and use it to look up the target destination associate with the key&lt;/li> 
 &lt;li>White list URLs (if possible)&lt;/li> 
 &lt;li>Validate that the beginning of the URL is part of a white list&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)&lt;/a>&lt;br>&lt;a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path&lt;/a>&lt;br>&lt;a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br&gt;&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="URLCONNECTION_SSRF_FD">URLConnection Server-Side Request Forgery (SSRF) and File Disclosure&lt;/a>&lt;/h2>&lt;p> Server-Side Request Forgery occur when a web server executes a request to a user supplied destination parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services or to launch attacks from your web server.&lt;/p>&lt;p> URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;/p>&lt;pre>new URL(String url).openConnection()&lt;/pre>&lt;pre>new URL(String url).openStream()&lt;/pre>&lt;pre>new URL(String url).getContent()&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Don't accept URL destinations from users&lt;/li> 
 &lt;li>Accept a destination key, and use it to look up the target destination associate with the key&lt;/li> 
 &lt;li>White list URLs (if possible)&lt;/li> 
 &lt;li>Validate that the beginning of the URL is part of a white list&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)&lt;/a>&lt;br>&lt;a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path&lt;/a>&lt;br>&lt;a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br&gt;&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="URLCONNECTION_SSRF_FD">URLConnection Server-Side Request Forgery (SSRF) and File Disclosure&lt;/a>&lt;/h2>&lt;p> Server-Side Request Forgery occur when a web server executes a request to a user supplied destination parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services or to launch attacks from your web server.&lt;/p>&lt;p> URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;/p>&lt;pre>new URL(String url).openConnection()&lt;/pre>&lt;pre>new URL(String url).openStream()&lt;/pre>&lt;pre>new URL(String url).getContent()&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Don't accept URL destinations from users&lt;/li> 
 &lt;li>Accept a destination key, and use it to look up the target destination associate with the key&lt;/li> 
 &lt;li>White list URLs (if possible)&lt;/li> 
 &lt;li>Validate that the beginning of the URL is part of a white list&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)&lt;/a>&lt;br>&lt;a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path&lt;/a>&lt;br>&lt;a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br&gt;&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="URLCONNECTION_SSRF_FD">URLConnection Server-Side Request Forgery (SSRF) and File Disclosure&lt;/a>&lt;/h2>&lt;p> Server-Side Request Forgery occur when a web server executes a request to a user supplied destination parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services or to launch attacks from your web server.&lt;/p>&lt;p> URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;/p>&lt;pre>new URL(String url).openConnection()&lt;/pre>&lt;pre>new URL(String url).openStream()&lt;/pre>&lt;pre>new URL(String url).getContent()&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Don't accept URL destinations from users&lt;/li> 
 &lt;li>Accept a destination key, and use it to look up the target destination associate with the key&lt;/li> 
 &lt;li>White list URLs (if possible)&lt;/li> 
 &lt;li>Validate that the beginning of the URL is part of a white list&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)&lt;/a>&lt;br>&lt;a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path&lt;/a>&lt;br>&lt;a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br&gt;&lt;br>&lt;/p></item><item>&lt;h2>&lt;a name="URLCONNECTION_SSRF_FD">URLConnection Server-Side Request Forgery (SSRF) and File Disclosure&lt;/a>&lt;/h2>&lt;p> Server-Side Request Forgery occur when a web server executes a request to a user supplied destination parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services or to launch attacks from your web server.&lt;/p>&lt;p> URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.&lt;/p>&lt;p> &lt;b>Vulnerable Code:&lt;/b>&lt;/p>&lt;pre>new URL(String url).openConnection()&lt;/pre>&lt;pre>new URL(String url).openStream()&lt;/pre>&lt;pre>new URL(String url).getContent()&lt;/pre>&lt;p>&lt;/p>&lt;p> &lt;b>Solution/Countermeasures:&lt;/b>&lt;br> &lt;/p>&lt;ul> 
 &lt;li>Don't accept URL destinations from users&lt;/li> 
 &lt;li>Accept a destination key, and use it to look up the target destination associate with the key&lt;/li> 
 &lt;li>White list URLs (if possible)&lt;/li> 
 &lt;li>Validate that the beginning of the URL is part of a white list&lt;/li> 
&lt;/ul>&lt;p>&lt;/p>&lt;br>&lt;p>&lt;b>References&lt;/b>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)&lt;/a>&lt;br>&lt;a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery&lt;/a>&lt;br>&lt;a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path&lt;/a>&lt;br>&lt;a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads&lt;/a>&lt;br>&lt;/p>&lt;p>&lt;br&gt;&lt;br>&lt;/p></item></ArrayList>